Filename: 259-guard-selection.txt
Title: New Guard Selection Behaviour
Author: Isis Lovecruft, George Kadianakis
Created: 2015-10-28
Status: Draft
Extends: 241-suspicious-guard-turnover.txt


§1. Overview

  In addition to the concerns regarding path bias attacks, namely that the
  space from which guards are selected by some specific client should not
  consist of the entirety of nodes with the Guard flag (cf. §1 of proposal
  #247), several additional concerns with respect to guard selection behaviour
  remain.  This proposal outlines a new entry guard selection algorithm, which
  additionally addresses the following concerns:

    - Heuristics and algorithms for determining how and which guard(s)
      is(/are) chosen should be kept as simple and easy to understand as
      possible.

    - Clients in censored regions or who are behind a fascist firewall who
      connect to the Tor network should not experience any significant
      disadvantage in terms of reachability or usability.

    - Tor should make a best attempt at discovering the most appropriate
      behaviour, with as little user input and configuration as possible.


§2. Design

  Alice, an OP attempting to connect to the Tor network, should undertake the
  following steps to determine information about the local network and to
  select (some) appropriate entry guards.  In the following scenario, it is
  assumed that Alice has already obtained a recent, valid, and verifiable
  consensus document.

  Before attempting the guard selection procedure, Alice initialises the guard
  data structures and prepopulates the guard structures, including
  POTENTIAL_UTOPIC_GUARDS and POTENTIAL_DYSTOPIC_GUARDS (cf. §XXX).  Additionally, the
  structures have been designed to make updates efficient both in terms of
  memory and time, in order that these and other portions of the code which
  require an up-to-date guard structure are capable of obtaining such.

    0. Determine if the local network is potentially accessible.

       Alice should attempt to discover if the local network is up or down,
       based upon information such as the availability of network interfaces
       and configured routing tables.  See #16120. [0]

       [XXX: This section needs to be fleshed out more.  I'm ignoring it for
       now, but since others have expressed interest in doing this, I've added
       this preliminary step. —isis]

    1. Check that we have not already attempted to add too many guards
       (cf. proposal #241).

    2. Then, if the PRIMARY_GUARDS on our list are marked offline, the
       algorithm attempts to retry them, to ensure that they were not flagged
       offline erroneously when the network was down. This retry attempt
       happens only once every 20 mins to avoid infinite loops.

       [Should we do an exponential decay on the retry as s7r suggested? —isis]

    3. Take the list of all available and fitting entry guards and return the
       top one in the list.

       [What is a fitting entry guard? The code suggest it is an entry guard
       listed in the most recent consensus AND it has not been tried already]

    3.5 If there was no available entry guards to return and enough time has
        passed since the last retry attempt (2), retry the PRIMARY_GUARDS.
        Then take the list of all available and fitting entry guards, and
        return the top one in the list.

    4. If there were no available entry guards, the algorithm adds a new entry
       guard and returns it.  [XXX detail what "adding" means]

       [XXX describe current meaning of "adding"?]

       Adding: If at least GUARDS_TRESHOLD entry guards have been added to
       PRIMARY_GUARDS too recently, do nothing.

       (Check Failover Threshold)

       Take a list of all possible guard nodes from either POTENTIAL_UTOPIC_GUARDS or
       POTENTIAL_DYSTOPIC_GUARDS depending on our network status (utopic/dystopic)
       which are not in PRIMARY_GUARDS.

       If we are prioritizing bandwidth, take the first one in this list.
       Otherwise, take one at random. Add the taken guard to PRIMARY_GUARDS.

    5. Go through the steps 1-4 above algorithm, using the POTENTIAL_UTOPIC_GUARDS.

       5.a. When the POTENTIAL_GUARDS_FAILOVER_THRESHOLD of the POTENTIAL_UTOPIC_GUARDS has
            been tried (without success), Alice should begin trying steps 1-4
            with entry guards from the POTENTIAL_DYSTOPIC_GUARDS as well.  Further,
            if no nodes from POTENTIAL_UTOPIC_GUARDS work, and it appears that the
            POTENTIAL_DYSTOPIC_GUARDS nodes are accessible, Alice should make a note
            to herself that she is possibly behind a fascist firewall.

       5.b. If no nodes from either the POTENTIAL_UTOPIC_GUARDS or the
            POTENTIAL_DYSTOPIC_GUARDS are working, Alice should make a note to
            herself that the network has potentially gone down.  Alice should
            then schedule, at exponentially decaying times, to rerun steps 0-5.

            [XXX Should we do step 0? Or just 1-4?  Should we retain any
            previous assumptions about FascistFirewall?  —isis]

    6. [XXX Insert potential other fallback mechanisms, e.g. switching to
       using bridges? —isis]


§3. New Data Structures, Consensus Parameters, & Configurable Variables

§3.1. Consensus Parameters & Configurable Variables

    Variables marked with an asterisk (*) SHOULD be consensus parameters.

    ALL_DYSTOPIC_GUARDS ¹
        All nodes listed in the most recent consensus which are marked with
        the Guard flag and which advertise their ORPort(s) on 80, 443, or any
        other addresses and/or ports controllable via the FirewallPorts and
        ReachableAddresses configuration options.

    ALL_UTOPIC_GUARDS
        All nodes listed in the most recent consensus which are marked with
        the Guard flag - this includes ALL_DYSTOPIC_GUARDS. [XXX this depends
        on results of simulation -ola]

    PRIMARY_GUARDS *
       The number of first, active, PRIMARY_GUARDS on either the
       POTENTIAL_UTOPIC_GUARDS or POTENTIAL_DYSTOPIC_GUARDS as "primary". We will go to
       extra lengths to ensure that we connect to one of our primary guards,
       before we fall back to a lower priority guard. By "active" we mean that
       we only consider guards that are present in the latest consensus as
       primary.

    UTOPIC_GUARDS_ATTEMPTED_THRESHOLD *
    DYSTOPIC_GUARDS_ATTEMPTED_THRESHOLD *
       These thresholds limit the amount of guards from the ALL_UTOPIC_GUARDS and
       ALL_DYSTOPIC_GUARDS which should be partitioned into a single
       POTENTIAL_UTOPIC_GUARDS or POTENTIAL_DYSTOPIC_GUARDS respectively.  Thus, this
       represents the maximum percentage of each of ALL_UTOPIC_GUARDS and
       ALL_DYSTOPIC_GUARDS respectively which we will attempt to connect to.  If
       this threshold is hit we assume that we are offline, filtered, or under
       a path bias attack by a LAN adversary.

       There are currently 1600 guards in the network.  We allow the user to
       attempt 80 of them before failing (5% of the guards).  With regards to
       filternet reachability, there are 450 guards on ports 80 or 443, so the
       probability of picking such a guard here should be high.

       This logic is not based on bandwidth, but rather on the number of
       relays which possess the Guard flag.  This is for three reasons: First,
       because each possible POTENTIAL_*_GUARDS is roughly equivalent to others of
       the same category in terms of bandwidth, it should be unlikely [XXX How
       unlikely? —isis] for an OP to select a guardset which contains less
       nodes of high bandwidth (or vice versa).  Second, the path-bias attacks
       detailed in proposal #241 are best mitigated through limiting the
       number of possible entry guards which an OP might attempt to use, and
       varying the level of security an OP can expect based solely upon the
       fact that the OP picked a higher number of low-bandwidth entry guards
       rather than a lower number of high-bandwidth entry guards seems like a
       rather cruel and unusual punishment in addition to the misfortune of
       already having slower entry guards.  Third, we favour simplicity in the
       redesign of the guard selection algorithm, and introducing bandwidth
       weight fraction computations seems like an excellent way to
       overcomplicate the design and implementation.

§3.2. Data Structures

    POTENTIAL_UTOPIC_GUARDS
    POTENTIAL_DYSTOPIC_GUARDS
        These lists consist of a subset of ALL_UTOPIC_GUARDS and ALL_DYSTOPIC_GUARDS
        respectively.  The guards in these guardsets are the only guards to
        which we will attempt connecting.

        When an OP is attempting to connect to the network, they will generate
        POTENTIAL_{UTOPIC,DYSTOPIC}_GUARDS by choosing a {UTOPIC,DYSTOPIC}_GUARDS_ATTEMPTED_THRESHOLD
        proportion from ALL_{UTOPIC,DYSTOPIC}_GUARDS. For the scope of this
        proposal, the algorithm for choosing this subset should be a random
        selection from a list weighted by bandwidth. Every time a new consensus
        arrives, these lists will be regenerated.

        Each guardset SHOULD have the property that the total sum of
        bandwidth weights for the nodes contained within it is roughly equal
        to each other guardset of the same type (i.e. one POTENTIAL_UTOPIC_GUARDS is
        roughly equivalent in terms of bandwidth to another POTENTIAL_UTOPIC_GUARDS,
        but not necessarily equivalent to a POTENTIAL_DYSTOPIC_GUARDS).

§4. Footnotes

¹ "Dystopic" was chosen because those are the guards you should choose from if
  you're behind a FascistFirewall.

§5. References

  [0]: https://trac.torproject.org/projects/tor/ticket/16120


-*- coding: utf-8 -*-
