Filename: 259-guard-selection.txt
Title: New Guard Selection Behaviour
Author: Isis Lovecruft, George Kadianakis
Created: 2015-10-28
Status: Draft
Extends: 241-suspicious-guard-turnover.txt


§1. Overview

  In addition to the concerns regarding path bias attacks, namely that the
  space from which guards are selected by some specific client should not
  consist of the entirety of nodes with the Guard flag (cf. §1 of proposal
  #247), several additional concerns with respect to guard selection behaviour
  remain.  This proposal outlines a new entry guard selection algorithm, which
  additionally addresses the following concerns:

    - Heuristics and algorithms for determining how and which guard(s)
      is(/are) chosen should be kept as simple and easy to understand as
      possible.

    - Clients in censored regions or who are behind a fascist firewall who
      connect to the Tor network should not experience any significant
      disadvantage in terms of reachability or usability.

    - Tor should make a best attempt at discovering the most appropriate
      behaviour, with as little user input and configuration as possible.


§2. Design

  Alice, an OP attempting to connect to the Tor network, should undertake the
  following steps to determine information about the local network and to
  select (some) appropriate entry guards.  In the following scenario, it is
  assumed that Alice has already obtained a recent, valid, and verifiable
  consensus document.

  Before attempting the guard selection procedure, Alice initialises the guard
  data structures and prepopulates the guard structures, including
  POTENTIAL_UTOPIC_GUARDS and POTENTIAL_DYSTOPIC_GUARDS.

    1. Ensure that PRIMARY_GUARDS contains at least N_PRIMARY_GUARDS that are
       all present in the latest consensus.

    2. For each entry in PRIMARY_GUARDS that is not marked as offline, test whether
       it can be reached. If not, mark it as offline. Otherwise return it and finish the algorithm.

    3. If no entry in PRIMARY_GUARDS is online, for each entry in PRIMARY_GUARDS
       that haven't been probed for the last 20 minutes clear the offline mark
       and repeat step 2 and 3 until we have either returned a guard or have no
       more guards in PRIMARY_GUARDS to try.

    4. If at least GUARDS_MAX_ADD_THRESHOLD entry guards have been added to
       PRIMARY_GUARDS within GUARDS_MAX_ADD_THRESHOLD_TIME, return failure from the
       algorithm.

       If the POTENTIAL_GUARDS_FAILOVER_THRESHOLD of the POTENTIAL_UTOPIC_GUARDS has
       been tried (without success), Alice should switch to trying steps 1-4 with entry
       guards from the POTENTIAL_DYSTOPIC_GUARDS as well. Further, if no nodes from
       POTENTIAL_UTOPIC_GUARDS work, and it appears that the POTENTIAL_DYSTOPIC_GUARDS
       nodes are accessible, Alice should make a note to herself that she is possibly
       behind a fascist firewall.

       Otherwise, choose a new guard from POTENTIAL_*_GUARDS using the same
       mechanism used to initially populate PRIMARY_GUARDS, add it to PRIMARY_GUARDS
       and redo the algorithm from step 2.

    5. If no nodes from either the POTENTIAL_UTOPIC_GUARDS or the
       POTENTIAL_DYSTOPIC_GUARDS are working, Alice should signal failure
       to the caller, indicating that the network is potentially down. She should also
       go back over all guards marked as offline in this run and clear the offline status
       that mark.

§3. New Data Structures, Consensus Parameters, & Configurable Variables

§3.1. Consensus Parameters & Configurable Variables

    Variables marked with an asterisk (*) SHOULD be consensus parameters.

    ALL_DYSTOPIC_GUARDS ¹
        All nodes listed in the most recent consensus which are marked with
        the Guard flag and which advertise their ORPort(s) on 80, 443, or any
        other addresses and/or ports controllable via the FirewallPorts and
        ReachableAddresses configuration options.

    ALL_UTOPIC_GUARDS
        All nodes listed in the most recent consensus which are marked with
        the Guard flag - this includes ALL_DYSTOPIC_GUARDS. [XXX this depends
        on results of simulation -ola]

    N_PRIMARY_GUARDS *
       The number of first, active guards on either the
       POTENTIAL_UTOPIC_GUARDS or POTENTIAL_DYSTOPIC_GUARDS to add to PRIMARY_GUARDS.
       We will go to  extra lengths to ensure that we connect to one of our primary guards,
       before we fall back to a lower priority guard. By "active" we mean that
       we only consider guards that are present in the latest consensus as
       primary.

    PRIMARY_GUARDS
        A list of N_PRIMARY_GUARDS guards that have been taken from POTENTIAL_*_GUARDS.
        These should be chosen as the guards with highest bandwidth that are still in the
        latest consensus.

    GUARDS_MAX_ADD_THRESHOLD *
        The maximum number of guards to add to PRIMARY_GUARDS within a specific time
        period, in this case GUARDS_MAX_ADD_THRESHOLD_TIME.

    UTOPIC_GUARDS_FAILOVER_THRESHOLD *
        The threshold of guards from POTENTIAL_UTOPIC_GUARDS we can try before giving up
        and assuming we are in a dystopic network.

    UTOPIC_GUARDS_ATTEMPTED_THRESHOLD *
    DYSTOPIC_GUARDS_ATTEMPTED_THRESHOLD *
       These thresholds limit the amount of guards from the ALL_UTOPIC_GUARDS and
       ALL_DYSTOPIC_GUARDS which should be partitioned into a single
       POTENTIAL_UTOPIC_GUARDS or POTENTIAL_DYSTOPIC_GUARDS respectively.  Thus, this
       represents the maximum percentage of each of ALL_UTOPIC_GUARDS and
       ALL_DYSTOPIC_GUARDS respectively which we will attempt to connect to.  If
       this threshold is hit we assume that we are offline, filtered, or under
       a path bias attack by a LAN adversary.

       There are currently 1600 guards in the network.  We allow the user to
       attempt 80 of them before failing (5% of the guards).  With regards to
       filternet reachability, there are 450 guards on ports 80 or 443, so the
       probability of picking such a guard here should be high.

       This logic is not based on bandwidth, but rather on the number of
       relays which possess the Guard flag.  This is for three reasons: First,
       because each possible POTENTIAL_*_GUARDS is roughly equivalent to others of
       the same category in terms of bandwidth, it should be unlikely [XXX How
       unlikely? —isis] for an OP to select a guardset which contains less
       nodes of high bandwidth (or vice versa).  Second, the path-bias attacks
       detailed in proposal #241 are best mitigated through limiting the
       number of possible entry guards which an OP might attempt to use, and
       varying the level of security an OP can expect based solely upon the
       fact that the OP picked a higher number of low-bandwidth entry guards
       rather than a lower number of high-bandwidth entry guards seems like a
       rather cruel and unusual punishment in addition to the misfortune of
       already having slower entry guards.  Third, we favour simplicity in the
       redesign of the guard selection algorithm, and introducing bandwidth
       weight fraction computations seems like an excellent way to
       overcomplicate the design and implementation.

§3.2. Data Structures

    POTENTIAL_UTOPIC_GUARDS
    POTENTIAL_DYSTOPIC_GUARDS
        These lists consist of a subset of ALL_UTOPIC_GUARDS and ALL_DYSTOPIC_GUARDS
        respectively.  The guards in these guardsets are the only guards to
        which we will attempt connecting.

        When an OP is attempting to connect to the network, they will generate
        POTENTIAL_{UTOPIC,DYSTOPIC}_GUARDS by choosing a {UTOPIC,DYSTOPIC}_GUARDS_ATTEMPTED_THRESHOLD
        proportion from ALL_{UTOPIC,DYSTOPIC}_GUARDS. For the scope of this
        proposal, the algorithm for choosing this subset should be a random
        selection from a list weighted by bandwidth. Every time a new consensus
        arrives, these lists will be regenerated.

        Each guardset SHOULD have the property that the total sum of
        bandwidth weights for the nodes contained within it is roughly equal
        to each other guardset of the same type (i.e. one POTENTIAL_UTOPIC_GUARDS is
        roughly equivalent in terms of bandwidth to another POTENTIAL_UTOPIC_GUARDS,
        but not necessarily equivalent to a POTENTIAL_DYSTOPIC_GUARDS).

§4. Footnotes

¹ "Dystopic" was chosen because those are the guards you should choose from if
  you're behind a FascistFirewall.

§5. References


-*- coding: utf-8 -*-
